diff --git a/Makefile b/Makefile
index 62fd0f8..0dd64af 100644
--- a/Makefile
+++ b/Makefile
@@ -139,6 +139,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_testloop\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -160,7 +161,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..26fb901 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -101,7 +101,6 @@ allocpid()
 
   return pid;
 }
-
 // Look in the process table for an UNUSED proc.
 // If found, initialize state required to run in the kernel,
 // and return with p->lock held.
@@ -145,6 +144,7 @@ found:
   memset(&p->context, 0, sizeof(p->context));
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
+  p->priority = 300;
 
   return p;
 }
@@ -169,6 +169,7 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->priority = 0;
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -448,13 +449,31 @@ scheduler(void)
   struct cpu *c = mycpu();
 
   c->proc = 0;
+  int cur = 0;
   for(;;){
     // The most recent process to run may have had interrupts
     // turned off; enable them to avoid a deadlock if all
     // processes are waiting.
     intr_on();
 
-    for(p = proc; p < &proc[NPROC]; p++) {
+    // get max priority
+    int lt = -1;
+    for(p = proc; p < &proc[NPROC]; p++)
+      if(p->state == RUNNABLE && p->priority>lt)
+        lt = p->priority;
+
+    // get processes with such priority
+    struct proc* proclist[NPROC];
+    int len = 0;
+    for(p = proc; p < &proc[NPROC]; p++)
+      if(p->state == RUNNABLE && p->priority==lt)
+        proclist[len++] = p;
+
+    // RR or priority
+    cur++;
+    if (cur>=len) cur = 0;
+    p = proclist[cur];
+    if(p){
       acquire(&p->lock);
       if(p->state == RUNNABLE) {
         // Switch to chosen process.  It is the process's job
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..10b322b 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,5 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int priority;
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..5f14471 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,7 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_setpriority(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +127,7 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_setpriority]   sys_setpriority,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..89453ae 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_setpriority  22
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..d002587 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -91,3 +91,14 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_setpriority(void)
+{
+  int priority;
+  argint(0, &priority);
+  acquire(&tickslock);
+  myproc()->priority = priority;
+  release(&tickslock);
+  return 0;
+}
diff --git a/user/testloop.c b/user/testloop.c
new file mode 100644
index 0000000..aa534c0
--- /dev/null
+++ b/user/testloop.c
@@ -0,0 +1,30 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+#define BOLD_YELLOW "\033[1;33m"
+#define BOLD_RED "\033[1;31m"
+#define RESET "\033[0m"
+
+int main(int argc, char* argv[]){
+    int pid = getpid();
+    uint32 iters = atoi(argv[1]);
+    int priority = atoi(argv[2]);
+    setpriority(priority);
+    sleep(5); // to let the scheduler run and set the priority
+    int entry_time = uptime();
+    printf(BOLD_YELLOW"PID %d (%d): Starting %u iterations at time %d\n"RESET, pid, priority, iters, entry_time);
+    for(int i = 0; i < iters; i++){
+        // do some dummy work
+        if(i%10 == 0) 
+        printf("PID %d (%d): Iteration %d\n", pid, priority, i); // comment out this line if needed, this is only for testing
+        for(int j = 0; j < 50000000; j++){
+            int x = j * j;
+            x = x + 1;
+        }
+    }
+    int exit_time = uptime();
+    printf(BOLD_RED"PID %d (%d): Finished at time %d\n"RESET, pid, priority, exit_time);
+    exit(0);
+}
+// testloop 200 10 &; testloop 150 8 &; testloop 100 15 &; testloop 90 8 &;
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 04013ca..2897d76 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int setpriority(int);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..de52bf7 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,4 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("setpriority");

diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..f971c31
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,8 @@
+{
+    "files.associations": {
+        "user.h": "c",
+        "threads.h": "c",
+        "defs.h": "c",
+        "riscv.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 62fd0f8..0da83ea 100644
--- a/Makefile
+++ b/Makefile
@@ -139,6 +139,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_threads\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index d1b6bb9..d1ef268 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -85,6 +85,7 @@ void            printfinit(void);
 int             cpuid(void);
 void            exit(int);
 int             fork(void);
+int             thread_create(uint64,uint64,uint64);
 int             growproc(int);
 void            proc_mapstacks(pagetable_t);
 pagetable_t     proc_pagetable(struct proc *);
@@ -101,6 +102,7 @@ void            sched(void);
 void            sleep(void*, struct spinlock*);
 void            userinit(void);
 int             wait(uint64);
+int             thread_join(uint64);
 void            wakeup(void*);
 void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
@@ -164,7 +166,10 @@ pagetable_t     uvmcreate(void);
 void            uvmfirst(pagetable_t, uchar *, uint);
 uint64          uvmalloc(pagetable_t, uint64, uint64, int);
 uint64          uvmdealloc(pagetable_t, uint64, uint64);
+uint64          uvmdeallocmirror(pagetable_t, uint64, uint64);
 int             uvmcopy(pagetable_t, pagetable_t, uint64);
+int             uvmcopymirror(pagetable_t, pagetable_t, uint64, uint64);
+int             uvmmirror(pagetable_t, pagetable_t, uint64);
 void            uvmfree(pagetable_t, uint64);
 void            uvmunmap(pagetable_t, uint64, uint64, int);
 void            uvmclear(pagetable_t, uint64);
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..8d44eb5 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -12,8 +12,8 @@ struct proc proc[NPROC];
 
 struct proc *initproc;
 
-int nextpid = 1;
-struct spinlock pid_lock;
+int nextpid = 1, nextmemid = 1;
+struct spinlock pid_lock, mem_lock, mem_locks[NPROC];
 
 extern void forkret(void);
 static void freeproc(struct proc *p);
@@ -48,9 +48,13 @@ void
 procinit(void)
 {
   struct proc *p;
+  int i;
   
   initlock(&pid_lock, "nextpid");
   initlock(&wait_lock, "wait_lock");
+  initlock(&mem_lock, "nextmem");
+  for(i=0;i<NPROC;i++)
+    initlock(&mem_locks[i], "mem_lock");
   for(p = proc; p < &proc[NPROC]; p++) {
       initlock(&p->lock, "proc");
       p->state = UNUSED;
@@ -124,6 +128,12 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
+  acquire(&mem_lock);
+  p->mem_id = nextmemid;
+  nextmemid = nextmemid + 1;
+  release(&mem_lock);
+  p->memlock = &(mem_locks[p->mem_id%NPROC]);
+  p->is_thread = 0;
 
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
@@ -158,8 +168,13 @@ freeproc(struct proc *p)
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
-  if(p->pagetable)
-    proc_freepagetable(p->pagetable, p->sz);
+  if(p->pagetable){
+    if(p->is_thread){
+      ;
+    }
+    else
+      proc_freepagetable(p->pagetable, p->sz);
+  }
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
@@ -260,17 +275,39 @@ int
 growproc(int n)
 {
   uint64 sz;
-  struct proc *p = myproc();
+  struct proc *p = myproc(), *pp;
 
+  acquire(p->memlock);
   sz = p->sz;
+  uint64 oldsz = sz;
   if(n > 0){
     if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
       return -1;
     }
+    for (pp = proc; pp < &proc[NPROC]; pp++)
+    {
+      acquire(&pp->lock);
+      if (p != pp && pp->mem_id == p->mem_id){
+        if(uvmcopymirror(p->pagetable, pp->pagetable, oldsz, sz)<0){
+          release(&pp->lock);
+          return -1;
+        }
+        pp->sz = sz;
+      }
+      release(&pp->lock);
+    }
   } else if(n < 0){
     sz = uvmdealloc(p->pagetable, sz, sz + n);
+    for (pp = proc; pp < &proc[NPROC]; pp++)
+    {
+      acquire(&pp->lock);
+      if (p != pp && pp->mem_id == p->mem_id)
+        pp->sz = uvmdeallocmirror(pp->pagetable, oldsz, oldsz + n);
+      release(&pp->lock);
+    }
   }
   p->sz = sz;
+  release(p->memlock);
   return 0;
 }
 
@@ -324,6 +361,61 @@ fork(void)
 
   return pid;
 }
+int
+thread_create(uint64 fcn, uint64 arg, uint64 stack)
+{
+  int i, pid;
+  struct proc *np;
+  struct proc *p = myproc();
+
+  // Allocate process.
+  if((np = allocproc()) == 0){
+    return -1;
+  }
+
+  // Copy user memory from parent to child.
+  if(uvmmirror(p->pagetable, np->pagetable, p->sz) < 0){
+    freeproc(np);
+    release(&np->lock);
+    return -1;
+  }
+  np->sz = p->sz;
+
+  // copy saved user registers.
+  *(np->trapframe) = *(p->trapframe);
+
+  // Cause fork to return 0 in the child.
+  // np->trapframe->a0 = 0;
+  np->trapframe->sp = stack + PGSIZE;
+  np->trapframe->epc = fcn;
+  np->trapframe->a0 = arg;
+  np->trapframe->ra = 0xffffffff;
+  np->is_thread = 1;
+  np->mem_id = p->mem_id; 
+  np->memlock = p->memlock; 
+
+  // increment reference counts on open file descriptors.
+  for(i = 0; i < NOFILE; i++)
+    if(p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]);
+  np->cwd = idup(p->cwd);
+
+  safestrcpy(np->name, p->name, sizeof(p->name));
+
+  pid = np->pid;
+
+  release(&np->lock);
+
+  acquire(&wait_lock);
+  np->parent = p;
+  release(&wait_lock);
+
+  acquire(&np->lock);
+  np->state = RUNNABLE;
+  release(&np->lock);
+
+  return pid;
+}
 
 // Pass p's abandoned children to init.
 // Caller must hold wait_lock.
@@ -433,6 +525,52 @@ wait(uint64 addr)
     sleep(p, &wait_lock);  //DOC: wait-sleep
   }
 }
+int
+thread_join(uint64 addr)
+{
+  struct proc *pp;
+  int havekids, pid;
+  struct proc *p = myproc();
+
+  acquire(&wait_lock);
+
+  for(;;){
+    // Scan through table looking for exited children.
+    havekids = 0;
+    for(pp = proc; pp < &proc[NPROC]; pp++){
+      if(pp->parent == p){
+        // make sure the child isn't still in exit() or swtch().
+        acquire(&pp->lock);
+
+        havekids = 1;
+        if(pp->state == ZOMBIE && pp->is_thread && pp->pid == addr){
+          // Found one.
+          pid = pp->pid;
+          // if(addr != 0 && copyout(p->pagetable, addr, (char *)&pp->xstate,
+          //                         sizeof(pp->xstate)) < 0) {
+          //   release(&pp->lock);
+          //   release(&wait_lock);
+          //   return -1;
+          // }
+          freeproc(pp);
+          release(&pp->lock);
+          release(&wait_lock);
+          return pid;
+        }
+        release(&pp->lock);
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havekids || killed(p)){
+      release(&wait_lock);
+      return -1;
+    }
+    
+    // Wait for a child to exit.
+    sleep(p, &wait_lock);  //DOC: wait-sleep
+  }
+}
 
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..220bcd8 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,8 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+	// previous ones
+  struct spinlock *memlock;	// find places to set and release the locks 
+  int is_thread;               // if it is thread
+  int mem_id;                   // All threads will have the same physical pages with the mothrer, hence the same memory ID
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..6a81db3 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,9 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_thread_create(void);
+extern uint64 sys_thread_join(void);
+extern uint64 sys_thread_exit(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +129,9 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_thread_create]   sys_thread_create,
+[SYS_thread_join]   sys_thread_join,
+[SYS_thread_exit]   sys_thread_exit,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..e66c206 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_thread_create  22
+#define SYS_thread_join  23
+#define SYS_thread_exit  24
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..9bed33e 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -91,3 +91,26 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_thread_create(void)
+{
+  uint64 fcn, arg, stack;
+  argaddr(0,&fcn);
+  argaddr(1,&arg);
+  argaddr(2,&stack);
+  return thread_create(fcn,arg,stack);
+}
+uint64
+sys_thread_join(void)
+{
+  int pid;
+  argint(0, &pid);
+  return thread_join(pid);
+}
+uint64
+sys_thread_exit(void)
+{
+  exit(0);
+  return 0;
+}
diff --git a/kernel/vm.c b/kernel/vm.c
index 5c31e87..fe4db60 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -272,6 +272,19 @@ uvmdealloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz)
 
   return newsz;
 }
+uint64
+uvmdeallocmirror(pagetable_t pagetable, uint64 oldsz, uint64 newsz)
+{
+  if(newsz >= oldsz)
+    return oldsz;
+
+  if(PGROUNDUP(newsz) < PGROUNDUP(oldsz)){
+    int npages = (PGROUNDUP(oldsz) - PGROUNDUP(newsz)) / PGSIZE;
+    uvmunmap(pagetable, PGROUNDUP(newsz), npages, 0);
+  }
+
+  return newsz;
+}
 
 // Recursively free page-table pages.
 // All leaf mappings must already have been removed.
@@ -338,6 +351,68 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   uvmunmap(new, 0, i / PGSIZE, 1);
   return -1;
 }
+int
+// uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
+uvmcopymirror(pagetable_t old, pagetable_t new, uint64 sz, uint64 newsz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+  // char *mem;
+  sz = PGROUNDUP(sz);
+
+  // for(i = 0; i < sz; i += PGSIZE){
+  for(i = sz; i < newsz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    // if((mem = kalloc()) == 0)
+    //   goto err;
+    // memmove(mem, (char*)pa, PGSIZE);
+    // if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
+      // kfree(mem);
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, sz, i / PGSIZE, 0);
+  return -1;
+}
+int
+uvmmirror(pagetable_t old, pagetable_t new, uint64 sz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+  // char *mem;
+
+  for(i = 0; i < sz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    // if((mem = kalloc()) == 0)
+    //   goto err;
+    // memmove(mem, (char*)pa, PGSIZE);
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
+      // kfree(mem);
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  return -1;
+}
 
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
diff --git a/user/threads.c b/user/threads.c
new file mode 100644
index 0000000..9ab284b
--- /dev/null
+++ b/user/threads.c
@@ -0,0 +1,77 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/threads.h"
+
+struct balance {
+    char name[32];
+    int amount;
+};
+
+volatile int total_balance = 0;
+
+volatile unsigned int delay (unsigned int d) {
+   unsigned int i; 
+   for (i = 0; i < d; i++) {
+       __asm volatile( "nop" ::: );
+   }
+
+   return i;   
+}
+
+struct thread_spinlock lock;
+struct thread_mutexlock mlock;
+
+void do_work(void *arg){
+    int i; 
+    int old;
+
+    
+    
+   
+    struct balance *b = (struct balance*) arg; 
+    printf( "Starting do_work: s:%s\n", b->name);
+
+    for (i = 0; i < b->amount; i++) { 
+        // lock and mlock will be implemented by you.
+         thread_spin_lock(&lock);
+         thread_mutex_lock(&mlock);
+         old = total_balance;
+         delay(100000);
+	 // if(old != total_balance)  printf("we will miss an update. old: %d total_balance: %d\n", old, total_balance);
+         total_balance = old + 1;
+         thread_mutex_unlock(&mlock);
+         thread_spin_unlock(&lock);
+
+    }
+  
+    printf( "Done s:%s\n", b->name);
+
+    thread_exit();
+    return;
+}
+
+int main(int argc, char *argv[]) {
+    thread_spin_init(&lock);
+    thread_mutex_init(&mlock);
+
+  struct balance b1 = {"b1", 3200};
+  struct balance b2 = {"b2", 2800};
+ 
+  void *s1, *s2;
+  int thread1, thread2, r1, r2;
+
+  s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+  s2 = malloc(4096);
+
+  thread1 = thread_create(do_work, (void*)&b1, s1);
+  thread2 = thread_create(do_work, (void*)&b2, s2); 
+
+  r1 = thread_join(thread1);
+  r2 = thread_join(thread2);
+  
+  printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n", 
+      thread1, r1, thread2, r2, total_balance);
+
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/threads.h b/user/threads.h
new file mode 100644
index 0000000..ac6fb6c
--- /dev/null
+++ b/user/threads.h
@@ -0,0 +1,36 @@
+struct thread_spinlock {
+  uint locked;
+};
+
+void thread_spin_init(struct thread_spinlock *lk){
+  lk->locked = 0;
+}
+
+void thread_spin_lock(struct thread_spinlock *lk){
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0);
+  __sync_synchronize();
+}
+
+void thread_spin_unlock(struct thread_spinlock *lk){
+  __sync_synchronize();
+  __sync_lock_release(&lk->locked);
+}
+
+struct thread_mutexlock {
+  uint locked;
+};
+
+void thread_mutex_init(struct thread_mutexlock *lk){
+  lk->locked = 0;
+}
+
+void thread_mutex_lock(struct thread_mutexlock *lk){
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
+    sleep(1);
+  __sync_synchronize();
+}
+
+void thread_mutex_unlock(struct thread_mutexlock *lk){
+  __sync_synchronize();
+  __sync_lock_release(&lk->locked);
+}
diff --git a/user/user.h b/user/user.h
index 04013ca..d96d6bf 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int thread_create(void(*fcn)(void*), void *arg, void*stack);
+int thread_join(int thread_id);
+void thread_exit(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..5c6bc71 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("thread_create");
+entry("thread_join");
+entry("thread_exit");
\ No newline at end of file

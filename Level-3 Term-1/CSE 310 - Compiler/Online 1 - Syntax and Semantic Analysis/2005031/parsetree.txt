start : program 	<Line: 1-19>
 program : program unit 	<Line: 1-19>
  program : unit 	<Line: 1-3>
   unit : func_definition 	<Line: 1-3>
    func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 	<Line: 1-3>
     type_specifier : INT 	<Line: 1-1>
      INT : int	<Line: 1>
     ID : foo	<Line: 1>
     LPAREN : (	<Line: 1>
     parameter_list : parameter_list COMMA type_specifier ID 	<Line: 1-1>
      parameter_list : parameter_list COMMA type_specifier ID 	<Line: 1-1>
       parameter_list : type_specifier ID 	<Line: 1-1>
        type_specifier : INT 	<Line: 1-1>
         INT : int	<Line: 1>
        ID : x	<Line: 1>
       COMMA : ,	<Line: 1>
       type_specifier : INT 	<Line: 1-1>
        INT : int	<Line: 1>
       ID : y	<Line: 1>
      COMMA : ,	<Line: 1>
      type_specifier : INT 	<Line: 1-1>
       INT : int	<Line: 1>
      ID : z	<Line: 1>
     RPAREN : )	<Line: 1>
     compound_statement : LCURL statements RCURL 	<Line: 1-3>
      LCURL : {	<Line: 1>
      statements : statement 	<Line: 2-2>
       statement : RETURN expression SEMICOLON 	<Line: 2-2>
        RETURN : return	<Line: 2>
        expression : logic_expression 	<Line: 2-2>
         logic_expression : rel_expression 	<Line: 2-2>
          rel_expression : simple_expression 	<Line: 2-2>
           simple_expression : simple_expression ADDOP term 	<Line: 2-2>
            simple_expression : simple_expression ADDOP term 	<Line: 2-2>
             simple_expression : term 	<Line: 2-2>
              term : unary_expression 	<Line: 2-2>
               unary_expression : factor 	<Line: 2-2>
                factor : variable 	<Line: 2-2>
                 variable : ID 	<Line: 2-2>
                  ID : x	<Line: 2>
             ADDOP : +	<Line: 2>
             term : unary_expression 	<Line: 2-2>
              unary_expression : factor 	<Line: 2-2>
               factor : variable 	<Line: 2-2>
                variable : ID 	<Line: 2-2>
                 ID : y	<Line: 2>
            ADDOP : +	<Line: 2>
            term : unary_expression 	<Line: 2-2>
             unary_expression : factor 	<Line: 2-2>
              factor : variable 	<Line: 2-2>
               variable : ID 	<Line: 2-2>
                ID : z	<Line: 2>
        SEMICOLON : ;	<Line: 2>
      RCURL : }	<Line: 3>
  unit : func_definition 	<Line: 4-19>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 4-19>
    type_specifier : INT 	<Line: 4-4>
     INT : int	<Line: 4>
    ID : main	<Line: 4>
    LPAREN : (	<Line: 4>
    RPAREN : )	<Line: 4>
    compound_statement : LCURL statements RCURL 	<Line: 4-19>
     LCURL : {	<Line: 4>
     statements : statements statement 	<Line: 5-17>
      statements : statements statement 	<Line: 5-17>
       statements : statements statement 	<Line: 5-16>
        statements : statements statement 	<Line: 5-13>
         statements : statements statement 	<Line: 5-13>
          statements : statements statement 	<Line: 5-12>
           statements : statements statement 	<Line: 5-9>
            statements : statements statement 	<Line: 5-9>
             statements : statements statement 	<Line: 5-8>
              statements : statement 	<Line: 5-5>
               statement : var_declaration 	<Line: 5-5>
                var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 5-5>
                 type_specifier : INT 	<Line: 5-5>
                  INT : int	<Line: 5>
                 declaration_list : declaration_list COMMA ID 	<Line: 5-5>
                  declaration_list : ID 	<Line: 5-5>
                   ID : a	<Line: 5>
                  COMMA : ,	<Line: 5>
                  ID : b	<Line: 5>
                 SEMICOLON : ;	<Line: 5>
              statement : expression_statement 	<Line: 8-8>
               CONST_INT : 1	<Line: 8>
             statement : expression_statement 	<Line: 9-9>
              expression_statement : expression SEMICOLON 	<Line: 9-9>
               expression : variable ASSIGNOP logic_expression 	<Line: 9-9>
                variable : ID 	<Line: 9-9>
                 ID : b	<Line: 9>
                ASSIGNOP : =	<Line: 9>
                logic_expression : rel_expression 	<Line: 9-9>
                 rel_expression : simple_expression 	<Line: 9-9>
                  simple_expression : simple_expression ADDOP term 	<Line: 9-9>
                   simple_expression : term 	<Line: 9-9>
                    term : unary_expression 	<Line: 9-9>
                     unary_expression : factor 	<Line: 9-9>
                      factor : variable 	<Line: 9-9>
                       variable : ID 	<Line: 9-9>
                        ID : a	<Line: 9>
                   ADDOP : +	<Line: 9>
                   term : unary_expression 	<Line: 9-9>
                    unary_expression : factor 	<Line: 9-9>
                     factor : CONST_INT 	<Line: 9-9>
                      CONST_INT : 1	<Line: 9>
               SEMICOLON : ;	<Line: 9>
            statement : expression_statement 	<Line: 9-9>
             SEMICOLON : ;	<Line: 9>
           statement : expression_statement 	<Line: 12-12>
            CONST_INT : 2	<Line: 12>
          statement : expression_statement 	<Line: 13-13>
           expression_statement : expression SEMICOLON 	<Line: 13-13>
            expression : variable ASSIGNOP logic_expression 	<Line: 13-13>
             variable : ID 	<Line: 13-13>
              ID : b	<Line: 13>
             ASSIGNOP : =	<Line: 13>
             logic_expression : rel_expression 	<Line: 13-13>
              rel_expression : simple_expression 	<Line: 13-13>
               simple_expression : simple_expression ADDOP term 	<Line: 13-13>
                simple_expression : term 	<Line: 13-13>
                 term : unary_expression 	<Line: 13-13>
                  unary_expression : factor 	<Line: 13-13>
                   factor : variable 	<Line: 13-13>
                    variable : ID 	<Line: 13-13>
                     ID : a	<Line: 13>
                ADDOP : +	<Line: 13>
                term : unary_expression 	<Line: 13-13>
                 unary_expression : factor 	<Line: 13-13>
                  factor : CONST_INT 	<Line: 13-13>
                   CONST_INT : 3	<Line: 13>
            SEMICOLON : ;	<Line: 13>
         statement : expression_statement 	<Line: 13-13>
          SEMICOLON : ;	<Line: 13>
        statement : expression_statement 	<Line: 16-16>
         CONST_INT : 0	<Line: 16>
       statement : expression_statement 	<Line: 17-17>
        expression_statement : expression SEMICOLON 	<Line: 17-17>
         expression : variable ASSIGNOP logic_expression 	<Line: 17-17>
          variable : ID 	<Line: 17-17>
           ID : b	<Line: 17>
          ASSIGNOP : =	<Line: 17>
          logic_expression : rel_expression 	<Line: 17-17>
           rel_expression : simple_expression 	<Line: 17-17>
            simple_expression : term 	<Line: 17-17>
             term : unary_expression 	<Line: 17-17>
              unary_expression : factor 	<Line: 17-17>
               factor : variable 	<Line: 17-17>
                variable : ID 	<Line: 17-17>
                 ID : a	<Line: 17>
         SEMICOLON : ;	<Line: 17>
      statement : expression_statement 	<Line: 17-17>
       SEMICOLON : ;	<Line: 17>
     RCURL : }	<Line: 19>
